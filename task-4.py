'''
Реализовать программу, с которой можно играть в игру «19».
Правила игры следующие. Нужно выписать подряд числа от 1 до 19: в
строчку до 9, а потом начать следующую строку, в каждой клетке по 1
цифре. Затем игроку необходимо
вычеркнуть парные цифры или дающие в сумме 10 Условие — пары
должны находиться рядом или через зачеркнутые цифры по горизонтали
или по вертикали. После того как все возможные пары вычеркнуты,
оставшиеся цифры переписываются в конец таблицы. Цель — полностью
вычеркнуть все цифры. Взаимодействие с программой производится через
консоль. Игровое поле изображается в виде трех текстовых строк и
перерисовывается при каждом изменении состояния поля. При запросе
данных от пользователя программа сообщает, что ожидает от
пользователя (в частности, координаты очередного хода) и проверяет
корректность ввода. Программа должна уметь автоматически определять, что 
нужно выписать новые строки с цифрами и то, что партия окончена.
Сама программа НЕ ходит, т.е. не пытается выбирать пары цифр с целью
окончить игру.
'''

def check(line1, column1, line2, column2):
    if line1 == line2 and column1 == column2:  #Проверка, что игрок не ввел одинаковые координаты для обеих ячеек. Если это так, ход некорректен (возвращается 0).
        return 0
    if gf[line1][column1] == '-' or gf[line2][column2] == '-': #Проверка, что обе выбранные ячейки не являются уже вычеркнутыми (не содержат '-'). Если хотя бы одна вычеркнута, ход некорректен.
        return 0
    if gf[line1][column1] + gf[line2][column2] == 10: #Если сумма чисел в двух ячейках равна 10, их можно вычеркнуть. Ход корректен (возвращается 1).
        return 1
    if gf[line1][column1] == gf[line2][column2]:  #Проверка, равны ли числа в двух ячейках.
        if column1 == column2 or line1 == line2:  #Проверка, что ячейки находятся в одном столбце или в одной строке (т.е. являются соседями по вертикали или горизонтали).
            if abs(column1 - column2) == 1 or abs(line1 - line2) == 1: #Если ячейки являются непосредственными соседями (разница в индексах столбца или строки равна 1), то ход корректен.
                return 1
            else:
                '''
                Если ячейки в одном столбце, но не являются непосредственными соседями,
                их можно вычеркнуть, только если между ними находится вычеркнутая ячейка. 
                '''
                if column1 == column2: 
                    if gf[1][column1] == '-':
                        return 1
                    else:
                        return 0
                    
                if line1 == line2:
                    '''
                    Если ячейки находятся в одной строке, но не являются соседями, 
                    то проверяются все ячейки между ними.
                    Если все они вычеркнуты ('-'), то ход корректен. 
                    Если хотя бы одна не вычеркнута — ход некорректен.
                    '''
                    for c in range(min(column1, column2) + 1, max(column1, column2)):   
                        if gf[line1][c] != '-':
                            return 0
                    return 1
        else: #Если ячейки с одинаковыми цифрами находятся не в одной строке и не в одном столбце (т.е. по диагонали), ход некорректен.
            return 0


def finish(gf): #остались ли на поле возможные ходы.
    if gf.count('-') == 26: #если на поле 26 вычеркнутых ячеек (из 27), игра считается завершенной. 
        return 0
    else:
        '''
        Перебор всех возможных пар ячеек на поле. 
        Если для какой-либо пары функция check возвращает 1 (ход возможен), 
        то игра продолжается (возвращается 1). Если ни одной возможной пары не найдено, 
        игра завершена (возвращается 0).
        '''
        for line1 in range(3):
            for column1 in range(9):
                for line2 in range(3):
                    for column2 in range(9):
                        if check(line1, column1, line2, column2) == 1:
                            return 1
        return 0


def finalgamefield(gf): #Функция обновления поля
    lastslot = 0
    if gf.count('-') == 26 and gf[2][8] == '9': #Проверка, не заполнено ли поле уже правильно. Если да, возвращаем его как есть.
        return gf
    for line1 in range(3): #Цикл, который проходит по всем ячейкам поля в обратном порядке (с конца).
        for column1 in range(9):
            if gf[2 - line1][8 - column1] != '-':
                gf[2 - (lastslot // 9)][8 - lastslot] = gf[2 - line1][8 - column1]
                gf[2 - line1][8 - column1] = '-'
                lastslot += 1
    return (gf)
    '''
    Логика перезаписи:
    Находим невычеркнутую ячейку, начиная с конца.
    Перемещаем её число в самую правую нижнюю свободную позицию.
    Увеличиваем счетчик lastslot для отслеживания новой позиции.
    '''

#Инициализация начального игрового поля gf (game field) согласно правилам игры.
gf = [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 1, 1, 2, 1, 3, 1, 4, 1], [5, 1, 6, 1, 7, 1, 8, 1, 9]]

gameover = 0 #Основной игровой цикл. Пока gameover равен 0, игра продолжается.
while gameover == 0:
    if finish(gf) == 1: #Проверка, остались ли возможные ходы на поле.
        print('   1 2 3 4 5 6 7 8 9')
        print(' -------------------')
        print('1| ' + ''.join([str(x) + ' ' for x in gf[0]]))
        print('2| ' + ''.join([str(x) + ' ' for x in gf[1]]))
        print('3| ' + ''.join([str(x) + ' ' for x in gf[2]]))
        #Запрос координат двух ячеек у пользователя. Вычитается 1 для приведения к индексам массива (0..2 для строк, 0..8 для столбцов).
        line1 = int(input('Номер линии первого числа: ')) - 1
        column1 = int(input('Номер столбца первого числа: ')) - 1
        line2 = int(input('Номер линии второго числа: ')) - 1
        column2 = int(input('Номер столбца второго числа: ')) - 1
        #Если ход корректен (проверка через check), вычеркиваем ячейки (заменяем на '-'). Иначе выводим сообщение об ошибке.
        if check(line1, column1, line2, column2) == 1:
            gf[line1][column1], gf[line2][column2] = '-', '-'
        else:
            print('Неверные координаты')
    else: #Если возможных ходов не осталось (finish(gf) != 1), игра завершается. Вызывается finalgamefield для финального упорядочивания поля, и результат выводится на экран.
        print('Игра окончена!')
        gameover = 1
        fgf = finalgamefield(gf)
        print(*fgf[0])
        print(*fgf[1])
        print(*fgf[2])

